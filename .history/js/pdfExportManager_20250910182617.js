// Smart Study Planner - PDF Export Manager
class PDFExportManager {
    constructor(app) {
        this.app = app;
    }

    export() {
        const exportWindow = window.open('', '_blank');
        
        if (!exportWindow) {
            alert('Please allow pop-ups for this site to export PDF');
            return;
        }

        // Create the HTML content for export
        const exportContent = this.generateExportHTML();
        
        // Write content to the new window
        exportWindow.document.write(exportContent);
        exportWindow.document.close();
        
        // Focus the window (but don't auto-print)
        exportWindow.focus();
    }

    generateExportHTML() {
        const currentDate = new Date();
        const formattedCurrentDate = StudyPlannerUtils.formatDate(currentDate.toISOString());

        return `
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Study Planner Export - ${formattedCurrentDate}</title>
            <style>
                ${this.getExportStyles()}
            </style>
        </head>
        <body>
            <div class="export-container">
                <div class="export-header">
                    <h1>ðŸ“š Smart Study Planner</h1>
                    <div class="export-date">Exported on: ${formattedCurrentDate}</div>
                </div>

                <div class="kanban-export">
                    ${this.generateKanbanHTML()}
                </div>

                <div class="calendar-section">
                    <h2>ðŸ“… Calendar Overview</h2>
                    ${this.generateCalendarHtml()}
                </div>

                <div class="footer">
                    <p>Generated by Smart Study Planner - Stay organized, stay ahead! ðŸŽ¯</p>
                </div>
            </div>
        </body>
        </html>
        `;
    }

    getExportStyles() {
        return `
            * {
                margin: 0;
                padding: 0;
                box-sizing: border-box;
            }

            body {
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                background: linear-gradient(135deg, #1e1e1e 0%, #2d2d30 100%);
                color: #ffffff;
                line-height: 1.6;
                min-height: 100vh;
            }

            .export-container {
                max-width: 1200px;
                margin: 0 auto;
                padding: 30px;
            }

            .export-header {
                text-align: center;
                margin-bottom: 40px;
                border-bottom: 2px solid #444;
                padding-bottom: 20px;
            }

            .export-header h1 {
                font-size: 2.5rem;
                color: #61dafb;
                margin-bottom: 10px;
                text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
            }

            .export-date {
                font-size: 1.1rem;
                color: #999;
                font-weight: 300;
            }

            .kanban-export {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
                gap: 30px;
                margin-bottom: 50px;
            }

            .export-column {
                background: #2d2d30;
                border-radius: 12px;
                border-top: 4px solid #61dafb;
                box-shadow: 0 8px 25px rgba(0,0,0,0.2);
                overflow: hidden;
            }

            .export-column-header {
                background: #333;
                padding: 20px;
                border-bottom: 1px solid #444;
            }

            .export-column-title {
                font-size: 1.4rem;
                font-weight: 600;
                color: #61dafb;
                display: flex;
                align-items: center;
                justify-content: space-between;
            }

            .export-card-count {
                background: #61dafb;
                color: #1e1e1e;
                padding: 4px 12px;
                border-radius: 20px;
                font-size: 0.9rem;
                font-weight: 700;
            }

            .export-cards {
                padding: 20px;
            }

            .export-card {
                background: #3a3a3a;
                border-radius: 8px;
                padding: 15px;
                margin-bottom: 15px;
                border-left: 4px solid #61dafb;
                box-shadow: 0 2px 8px rgba(0,0,0,0.1);
                transition: all 0.3s ease;
            }

            .export-card:hover {
                transform: translateY(-2px);
                box-shadow: 0 4px 15px rgba(0,0,0,0.2);
            }

            .export-card:last-child {
                margin-bottom: 0;
            }

            .export-card-title {
                font-size: 1.1rem;
                font-weight: 600;
                color: #ffffff;
                margin-bottom: 8px;
            }

            .export-card-description {
                color: #ccc;
                margin-bottom: 10px;
                line-height: 1.5;
            }

            .export-card-meta {
                display: flex;
                justify-content: space-between;
                align-items: center;
                font-size: 0.85rem;
                color: #999;
                margin-top: 10px;
                padding-top: 10px;
                border-top: 1px solid #444;
            }

            .export-priority {
                padding: 4px 8px;
                border-radius: 4px;
                font-weight: 600;
                text-transform: uppercase;
                font-size: 0.75rem;
            }

            .priority-high { background: #e74c3c; color: white; }
            .priority-medium { background: #f39c12; color: white; }
            .priority-low { background: #2ecc71; color: white; }

            .export-due-date {
                font-weight: 600;
            }

            .due-overdue { color: #e74c3c; }
            .due-tomorrow { color: #f39c12; }

            .calendar-section {
                margin-top: 40px;
                padding: 30px;
                background: #2d2d30;
                border-radius: 12px;
                box-shadow: 0 8px 25px rgba(0,0,0,0.2);
            }

            .calendar-section h2 {
                color: #61dafb;
                margin-bottom: 30px;
                text-align: center;
                font-size: 2rem;
                text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
            }

            .calendar-grid {
                display: grid;
                grid-template-columns: repeat(7, 1fr);
                gap: 2px;
                background: #444;
                border-radius: 8px;
                overflow: hidden;
                max-width: 800px;
                margin: 0 auto;
            }

            .calendar-header {
                background: #61dafb;
                color: #1e1e1e;
                padding: 15px;
                text-align: center;
                font-weight: 700;
                font-size: 0.9rem;
            }

            .calendar-day {
                background: #3a3a3a;
                padding: 12px 8px;
                text-align: center;
                min-height: 60px;
                display: flex;
                flex-direction: column;
                justify-content: flex-start;
                align-items: center;
                position: relative;
                border: 1px solid #555;
            }

            .calendar-day.other-month {
                background: #2a2a2a;
                color: #666;
            }

            .calendar-day.today {
                background: #61dafb;
                color: #1e1e1e;
                font-weight: bold;
            }

            .calendar-day.has-due {
                background: #4a4a4a;
                border: 2px solid #f39c12;
            }

            .calendar-day.has-overdue {
                background: #4a2a2a;
                border: 2px solid #e74c3c;
            }

            .calendar-day-number {
                font-weight: 600;
                margin-bottom: 4px;
            }

            .calendar-task-count {
                background: #61dafb;
                color: #1e1e1e;
                border-radius: 50%;
                width: 20px;
                height: 20px;
                display: flex;
                align-items: center;
                justify-content: center;
                font-size: 0.7rem;
                font-weight: bold;
                margin-top: 2px;
            }

            .footer {
                text-align: center;
                margin-top: 40px;
                padding-top: 20px;
                border-top: 2px solid #444;
                color: #999;
                font-style: italic;
            }

            /* Print-friendly styles */
            @media print {
                body {
                    background: white !important;
                    color: black !important;
                }
                
                .export-container {
                    box-shadow: none !important;
                    background: white !important;
                }
                
                .export-column, .calendar-section {
                    background: white !important;
                    border: 1px solid #ccc !important;
                }
                
                .export-card {
                    background: #f9f9f9 !important;
                    border: 1px solid #ddd !important;
                }
                
                .calendar-day {
                    background: white !important;
                    border: 1px solid #ccc !important;
                }
                
                .calendar-day.today {
                    background: #e3f2fd !important;
                }
            }
        `;
    }

    generateKanbanHTML() {
        let kanbanHTML = '';
        
        // Sort columns by order
        const sortedColumns = [...this.app.columns].sort((a, b) => a.order - b.order);
        
        sortedColumns.forEach(column => {
            const columnCards = this.app.cards.filter(card => card.column === column.id);
            const columnColor = StudyPlannerUtils.getColumnColor(column.color);
            
            kanbanHTML += `
                <div class="export-column">
                    <div class="export-column-header" style="border-top-color: ${columnColor};">
                        <div class="export-column-title">
                            ${column.name}
                            <span class="export-card-count">${columnCards.length}</span>
                        </div>
                    </div>
                    <div class="export-cards">
            `;

            if (columnCards.length === 0) {
                kanbanHTML += '<p style="color: #999; text-align: center; padding: 20px;">No cards in this section</p>';
            } else {
                columnCards.forEach(card => {
                    const isOverdue = card.dueDate && new Date(card.dueDate) < new Date();
                    const isTomorrow = card.dueDate && StudyPlannerUtils.isTomorrow(card.dueDate);
                    
                    let dueDateHtml = '';
                    let dueDateClass = '';
                    
                    if (card.dueDate) {
                        const formattedDate = StudyPlannerUtils.formatDate(card.dueDate);
                        if (isOverdue) {
                            dueDateClass = 'due-overdue';
                            dueDateHtml = `<span class="export-due-date ${dueDateClass}">Due: ${formattedDate} (overdue)</span>`;
                        } else if (isTomorrow) {
                            dueDateClass = 'due-tomorrow';
                            dueDateHtml = `<span class="export-due-date ${dueDateClass}">Due: ${formattedDate} (tomorrow)</span>`;
                        } else {
                            dueDateHtml = `<span class="export-due-date">Due: ${formattedDate}</span>`;
                        }
                    }

                    kanbanHTML += `
                        <div class="export-card" style="border-left-color: ${columnColor};">
                            <div class="export-card-title">${card.title}</div>
                            <div class="export-card-description">${card.description || 'No description'}</div>
                            <div class="export-card-meta">
                                <span class="export-priority priority-${card.priority || 'medium'}">${(card.priority || 'medium').toUpperCase()}</span>
                                ${dueDateHtml}
                            </div>
                        </div>
                    `;
                });
            }

            kanbanHTML += `
                    </div>
                </div>
            `;
        });

        return kanbanHTML;
    }

    generateCalendarHtml() {
        const now = new Date();
        const currentMonth = now.getMonth();
        const currentYear = now.getFullYear();
        
        // Get first day of the month and last day
        const firstDay = new Date(currentYear, currentMonth, 1);
        const lastDay = new Date(currentYear, currentMonth + 1, 0);
        const firstDayWeekday = firstDay.getDay();
        const daysInMonth = lastDay.getDate();
        
        // Month names
        const monthNames = [
            "January", "February", "March", "April", "May", "June",
            "July", "August", "September", "October", "November", "December"
        ];
        
        let calendarHTML = `
            <div class="calendar-container">
                <h3 style="text-align: center; color: #61dafb; margin-bottom: 20px; font-size: 1.5rem;">
                    ${monthNames[currentMonth]} ${currentYear}
                </h3>
                <div class="calendar-grid">
        `;
        
        // Add day headers
        const dayHeaders = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
        dayHeaders.forEach(day => {
            calendarHTML += `<div class="calendar-header">${day}</div>`;
        });
        
        // Add empty cells for days before the first day of the month
        for (let i = 0; i < firstDayWeekday; i++) {
            const prevMonthDate = new Date(currentYear, currentMonth, -firstDayWeekday + i + 1);
            calendarHTML += `<div class="calendar-day other-month">
                <span class="calendar-day-number">${prevMonthDate.getDate()}</span>
            </div>`;
        }
        
        // Add days of the current month
        for (let day = 1; day <= daysInMonth; day++) {
            const date = new Date(currentYear, currentMonth, day);
            const dateString = date.toISOString().split('T')[0];
            const isToday = date.toDateString() === now.toDateString();
            
            // Check for cards due on this date
            const cardsOnDate = this.app.cards.filter(card => {
                return card.dueDate && card.dueDate === dateString;
            });
            
            const hasOverdue = cardsOnDate.some(card => new Date(card.dueDate) < new Date());
            const hasDue = cardsOnDate.length > 0;
            
            let dayClass = 'calendar-day';
            if (isToday) dayClass += ' today';
            if (hasOverdue) dayClass += ' has-overdue';
            else if (hasDue) dayClass += ' has-due';
            
            calendarHTML += `<div class="${dayClass}">
                <span class="calendar-day-number">${day}</span>
                ${cardsOnDate.length > 0 ? `<span class="calendar-task-count">${cardsOnDate.length}</span>` : ''}
            </div>`;
        }
        
        // Add empty cells for days after the last day of the month
        const totalCells = Math.ceil((firstDayWeekday + daysInMonth) / 7) * 7;
        const remainingCells = totalCells - (firstDayWeekday + daysInMonth);
        for (let i = 1; i <= remainingCells; i++) {
            calendarHTML += `<div class="calendar-day other-month">
                <span class="calendar-day-number">${i}</span>
            </div>`;
        }
        
        calendarHTML += `
                </div>
            </div>
        `;
        
        return calendarHTML;
    }
}
